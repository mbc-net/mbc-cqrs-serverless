name: CI/CD Pipeline

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [develop, beta, main]

permissions:
  contents: write
  actions: read
  checks: write
  issues: write
  pull-requests: write

jobs:
  unit_tests:
    name: Unit Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x, 24.x]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Build packages
        run: npm run build

      - name: Run Unit Tests
        run: npm run test

      - name: Unit Test Report
        uses: dorny/test-reporter@v1
        if: (success() || failure()) && github.event.pull_request.head.repo.full_name == github.repository
        with:
          name: Unit Tests Reporter-${{ matrix.node-version }}
          path: report/unit.xml
          reporter: jest-junit
          fail-on-error: 'true'

  e2e_tests:
    name: E2e Test For Core package
    needs: unit_tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x, 24.x]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Build test
        run: npx lerna run build:test --scope=@mbc-cqrs-serverless/core

      - name: Run e2e Tests
        run: npx lerna run test:e2e --scope=@mbc-cqrs-serverless/core

      - uses: actions/upload-artifact@v4
        name: 'upload artifact'
        if: success() || failure()
        with:
          name: core-report-artifact-${{ matrix.node-version }}
          path: ./packages/core/test/scripts/*.out.txt

      - name: E2E Test Report
        uses: dorny/test-reporter@v1
        if: (success() || failure()) && github.event.pull_request.head.repo.full_name == github.repository
        with:
          name: E2E Core Tests Reporter-${{ matrix.node-version }}
          path: report/e2e-core.xml
          reporter: jest-junit
          fail-on-error: 'true'

  publish:
    name: Publish
    needs: e2e_tests
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: develop # Checkout develop branch instead of tag
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm
      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Build packages
        run: npm run build

      - name: Authenticate with npm
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: Extract version from tag
        id: version
        run: |
          TAG_NAME=${{ github.ref_name }}
          VERSION=${TAG_NAME#v}  # Remove 'v' prefix
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: Determine release type
        id: release-type
        run: |
          if [[ ${{ steps.version.outputs.version }} == *"beta"* ]]; then
            echo "tag=beta" >> $GITHUB_OUTPUT
            echo "prerelease=true" >> $GITHUB_OUTPUT
          elif [[ ${{ steps.version.outputs.version }} == *"alpha"* ]]; then
            echo "tag=alpha" >> $GITHUB_OUTPUT
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "tag=latest" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: Update package versions
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create a temporary branch for version update
          git checkout -b release-${{ steps.version.outputs.version }}

          # Update versions
          npx lerna version ${{ steps.version.outputs.version }} --exact --no-git-tag-version --yes --force-publish

          # Commit changes
          git add .
          git commit -m "chore: update package versions to ${{ steps.version.outputs.version }}" || echo "No changes to commit"

      - name: Determine diff base for beta/alpha
        if: steps.release-type.outputs.prerelease == 'true'
        id: beta-diff-base
        run: |
          # For beta: compare against last beta/alpha tag OR develop branch
          LAST_BETA=$(git tag -l "v*-beta*" "v*-alpha*" | sort -V | tail -1)
          if [ -z "$LAST_BETA" ]; then
            echo "diff_base=develop" >> $GITHUB_OUTPUT
            echo "No previous beta/alpha tag found, using develop branch"
          else
            echo "diff_base=$LAST_BETA" >> $GITHUB_OUTPUT
            echo "Using last beta/alpha tag: $LAST_BETA"
          fi

      - name: Determine diff base for production
        if: steps.release-type.outputs.prerelease == 'false'
        id: prod-diff-base
        run: |
          # For production: compare against last production tag OR main branch
          LAST_PROD=$(git tag -l "v*.*.*" | grep -v -E "(alpha|beta|rc)" | sort -V | tail -1)
          if [ -z "$LAST_PROD" ]; then
            echo "diff_base=main" >> $GITHUB_OUTPUT
            echo "No previous production tag found, using main branch"
          else
            echo "diff_base=$LAST_PROD" >> $GITHUB_OUTPUT
            echo "Using last production tag: $LAST_PROD"
          fi

      - name: Check for changes (Beta/Alpha)
        if: steps.release-type.outputs.prerelease == 'true'
        id: beta-changes
        run: |
          DIFF_BASE="${{ steps.beta-diff-base.outputs.diff_base }}"
          if git rev-parse "$DIFF_BASE" >/dev/null 2>&1; then
            CHANGED_PACKAGES=$(npx lerna list --since="$DIFF_BASE" --json | jq length)
          else
            # Fallback: force publish all packages for beta
            CHANGED_PACKAGES=1
          fi
          echo "changed_count=$CHANGED_PACKAGES" >> $GITHUB_OUTPUT
          echo "Found $CHANGED_PACKAGES changed packages since $DIFF_BASE"

      - name: Check for changes (Production)
        if: steps.release-type.outputs.prerelease == 'false'
        id: prod-changes
        run: |
          DIFF_BASE="${{ steps.prod-diff-base.outputs.diff_base }}"
          if git rev-parse "$DIFF_BASE" >/dev/null 2>&1; then
            CHANGED_PACKAGES=$(npx lerna list --since="$DIFF_BASE" --json | jq length)
          else
            # Fallback: force publish all packages for production
            CHANGED_PACKAGES=1
          fi
          echo "changed_count=$CHANGED_PACKAGES" >> $GITHUB_OUTPUT
          echo "Found $CHANGED_PACKAGES changed packages since $DIFF_BASE"

      - name: Publish to npm (Beta/Alpha)
        if: steps.release-type.outputs.prerelease == 'true' && steps.beta-changes.outputs.changed_count != '0'
        run: |
          # For beta/alpha, always force publish to ensure version is published
          npx lerna publish from-git --yes --dist-tag ${{ steps.release-type.outputs.tag }} --force-publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Publish to npm (Production)
        if: steps.release-type.outputs.prerelease == 'false' && steps.prod-changes.outputs.changed_count != '0'
        run: |
          # For production, also force publish when changes are detected
          npx lerna publish from-git --yes --force-publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Skip publish (no changes)
        if: |
          (steps.release-type.outputs.prerelease == 'true' && steps.beta-changes.outputs.changed_count == '0') ||
          (steps.release-type.outputs.prerelease == 'false' && steps.prod-changes.outputs.changed_count == '0')
        run: |
          echo "No changes detected for this release type. Skipping npm publish."
          echo "This is normal behavior - packages are only published when there are actual code changes."

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: ${{ steps.release-type.outputs.prerelease }}
          body: |
            ## Changes
            See the [CHANGELOG](./CHANGELOG.md) for details.

            ## Installation
            ```bash
            npm install @mbc-cqrs-serverless/cli@${{ steps.release-type.outputs.tag }}
            ```
          token: ${{ secrets.GITHUB_TOKEN }}
